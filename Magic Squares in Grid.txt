class Solution:
    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:
        def is_magic_square(row, col):
            distinct_vals = set()
            for i in range(3): # check for rows
                temp = grid[row+i][col:col+3]
                distinct_vals.update(temp)
                if sum(temp) != 15: return False
            
            for i in range(3):  # check for colums
                temp = [grid[j][col+i] for j in range(row, row+3)]
                distinct_vals.update(temp)
                if sum(temp) != 15: return False
            
            temp = [grid[row+i][col+i] for i in range(3)]   # check for diagonal 1
            distinct_vals.update(temp)
            if sum(temp) != 15: return False

            col+= 2
            temp = [grid[row+i][col-i] for i in range(3)]
            distinct_vals.update(temp)
            if sum(temp) != 15: return False

            return distinct_vals == {1,2,3,4,5,6,7,8,9}

        count, row, col = 0, 0, 0
        while row+2 < len(grid):
            while col+2 < len(grid[0]):
                count += int(is_magic_square(row, col))
                col += 1
            row += 1
            col = 0
        return count

